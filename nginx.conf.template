user nginx;
worker_processes auto;
error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for" '
                    'upstream: $upstream_addr rt=$request_time';

    access_log /var/log/nginx/access.log main;

    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    types_hash_max_size 2048;
    client_max_body_size 20M;

    # Upstream pool with primary/backup failover
    upstream app_pool {
        # Primary service (Blue - active)
        server app_blue:3000 max_fails=2 fail_timeout=5s;
        
        # Backup service (Green - only on Blue failure)
        server app_green:3000 backup max_fails=2 fail_timeout=5s;
        
        # Keep connections alive
        keepalive 32;
    }

    server {
        listen 80 default_server;
        server_name _;

        # Main catchall for all endpoints
        location / {
            proxy_pass http://app_pool;

            # Timeouts for quick failure detection (total max ~10s per requirement)
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;

            # Retry policy: on error, timeout, or 5xx, switch to backup
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_next_upstream_timeout 8s;

            # Forward original request headers
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # HTTP/1.1 for connection reuse
            proxy_http_version 1.1;
            proxy_set_header Connection "";

            # Preserve upstream headers (X-App-Pool, X-Release-Id, etc.)
            # Nginx forwards these by default; this ensures no stripping
            proxy_pass_request_headers on;
        }

        # Health check endpoint
        location /healthz {
            proxy_pass http://app_pool;
            proxy_connect_timeout 1s;
            proxy_send_timeout 2s;
            proxy_read_timeout 2s;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            access_log off;
        }

        # Version endpoint (explicit for clarity)
        location /version {
            proxy_pass http://app_pool;
            proxy_connect_timeout 2s;
            proxy_send_timeout 5s;
            proxy_read_timeout 5s;
            proxy_next_upstream error timeout http_500 http_502 http_503 http_504;
            proxy_next_upstream_tries 2;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        }

        # Chaos endpoints (for grader to trigger failures)
        location /chaos/ {
            proxy_pass http://app_pool;
            proxy_connect_timeout 2s;
            proxy_send_timeout 10s;
            proxy_read_timeout 10s;
            proxy_http_version 1.1;
            proxy_set_header Connection "";
        }
    }
}